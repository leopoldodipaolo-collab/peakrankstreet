"""Add registered_on to User model

Revision ID: 23e6ebea187d
Revises:
Create Date: 2025-10-14 13:30:02.648369

"""
from alembic import op
import sqlalchemy as sa
from datetime import datetime # <--- QUESTA RIGA È STATA AGGIUNTA QUI


# revision identifiers, used by Alembic.
revision = '23e6ebea187d'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### comandi di Alembic inizio ###

    # Passo 1: Aggiungi la colonna come nullable=True temporaneamente
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.add_column(sa.Column('registered_on', sa.DateTime(), nullable=True))

    # Passo 2: Aggiorna tutte le righe esistenti con un valore di default
    # ✅ CORREZIONE: Usa sqlalchemy text() per gestire differenze tra database
    from sqlalchemy import text
    
    # Ottieni la connessione per eseguire SQL raw
    conn = op.get_bind()
    
    # Determina il tipo di database e usa la sintassi appropriata
    if conn.engine.name == 'sqlite':
        conn.execute(text('UPDATE user SET registered_on = DATETIME("now") WHERE registered_on IS NULL'))
    else:  # PostgreSQL
        conn.execute(text('UPDATE "user" SET registered_on = NOW() WHERE registered_on IS NULL'))

    # Passo 3: Altera la colonna per renderla NOT NULL
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.alter_column('registered_on',
                   existing_type=sa.DateTime(),
                   nullable=False,
                   existing_nullable=True)

    # ### comandi di Alembic fine ###


def downgrade():
    # ### comandi auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.drop_column('registered_on')

    # ### end Alembic commands ###